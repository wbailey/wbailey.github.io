<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Becoming Medium]]></title>
  <link href="http://wbailey.github.io/atom.xml" rel="self"/>
  <link href="http://wbailey.github.io/"/>
  <updated>2013-10-07T12:25:46-07:00</updated>
  <id>http://wbailey.github.io/</id>
  <author>
    <name><![CDATA[Wes Bailey]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[A Flexible Framework for Leveling Software Engineers]]></title>
    <link href="http://wbailey.github.io/blog/2013/09/24/career-levels/"/>
    <updated>2013-09-24T11:43:00-07:00</updated>
    <id>http://wbailey.github.io/blog/2013/09/24/career-levels</id>
    <content type="html"><![CDATA[<h3>The Problem</h3>

<p>Defining a Senior Software Engineer seems to be a pretty difficult task for our industry.  Managing
expectations around this definition is also really difficult and causes strife in organizations that
are trying to grow and retain talent.  The current methodology is to create a &ldquo;<em>Job Description</em>&rdquo;
which focuses on &ldquo;<em>responsibilities</em>&rdquo; and &ldquo;<em>requirements</em>&rdquo; by listing the work skills, technical
requirements and years of experience required for the position.</p>

<!-- more -->


<p>Like everyone else I used this approach for a while until I ran into problems.  I started looking
for a framework that I could use to scale an organization in both talent evaluation and career
development.  I wanted answers to questions like:</p>

<ul>
<li>How do you differentiate between a Software Engineer and a Senior Software Engineer?</li>
<li>Is seniority based on years of experience or based on technical capability?</li>
<li>How do you promote and fairly compensate engineers who use different languages and tools?</li>
<li>How can you evaluate new talent consistently and compare them with the current members on your team?</li>
<li>Where do the years of experience numbers come from and are they just an artificial crutch
justification?</li>
<li>How do you mentor engineers in their career and so that they can grow and learn?</li>
</ul>


<p>I turned to the web and that gave me unfulfilling answers like the one on this thread on
<a href="http://programmers.stackexchange.com/questions/14914/whats-the-difference-between-entry-level-jr-sr-developers">programmers.stackexchange</a>
and this thread on
<a href="http://www.quora.com/When-does-a-software-developer-become-a-senior-software-developer">Quora</a>.  Of
course there are more posts and articles but they were not very fulfilling so I kept searching.
I talked with a lot of my peers in my network and they used the &ldquo;<em>Job Description</em>&rdquo; approach which
we already determined has failed.  Frustrated I spent a lot of time thinking on the topic and came
up with a framework that can assist in making the decisions around the questions above.</p>

<h3>A New Approach</h3>

<p>The first thing to realize is that the level definition is more than about just a single level for
the <em>Senior Software Engineer</em>.  Instead it is about many different levels that are necessary for an
organization to function and thrive.  There are some who argue for a &ldquo;<em>flat</em>&rdquo; organization but I&rsquo;ll
address that myth in another blog post.  After we have defined the levels, we should ensure that our
level definitions make it easy to answer the questions we posited previously.  They should also help
us lay the foundation for a career progression that is possible within the company helping us retain
talented people.</p>

<p>The challenge I set for myself which really help me free my mind was to answer the following
question:</p>

<blockquote><p>If you could describe what an engineer at this level will do using only word, what would it be?</p></blockquote>

<p>Upon the single word definition being complete I would want more information so then I decided upon
coming up with a single sentence description that contained the word to describe the role:</p>

<blockquote><p>Describe what the person at this level will be doing using the single word definition in a
sentence</p></blockquote>

<p>Continuing on the theme of building up the next logical progression would be to come up with
multiple sentences that elaborate on the focus of the level and providing guidance on the detail:</p>

<blockquote><p>Define 3 to 4 areas of focus for the level that provide guidance for all regardless of technical
requirements</p></blockquote>

<p>It is important with the last step of the approach to not get caught up in the details of the
technical requirements.  Doing so prevents you from having an overall framework and leads to the
dreaded Job Description model that we previously stated doesn&rsquo;t help solve any problems.</p>

<h3>The Framework</h3>

<p>First, let&rsquo;s define the levels in the engineering organization we are concerned with.  At ModCloth we
have the following:</p>

<ul>
<li>Principal Software Engineer</li>
<li>Senior Software Engineer</li>
<li>Software Engineer</li>
<li>Associate Software Engineer</li>
</ul>


<p>For an <em>associate</em> level engineer the word that jumped out at me instantly was <em>learning</em>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Five Stages of Learning]]></title>
    <link href="http://wbailey.github.io/blog/2013/09/06/the-five-stages-of-learning/"/>
    <updated>2013-09-06T16:38:00-07:00</updated>
    <id>http://wbailey.github.io/blog/2013/09/06/the-five-stages-of-learning</id>
    <content type="html"><![CDATA[<p>We just completed our semi-annual performance review cycle at ModCloth.  In many of my discussions
delivering the reviews we discussed learning.  In each case I shared a pearl of wisdom taught to me
by an adviser in college while I was studying physics:</p>

<blockquote><p>You don&#8217;t really learn physics until you teach it.</p><footer><strong>Philip Macklin</strong> <cite>Miami University</cite></footer></blockquote>


<p>After sharing this I encouraged my team members to be more proactive about mentoring.  The
hypothesis being they would become better engineers through teaching and truly learning their craft.</p>

<!--more-->


<p>This got me thinking about how we really learn.  Not the actual mechanics of basic learning mind
you.  Those are done by reading books, taking classes or whatever serves as the tool for delivering
the necessary content.  Rather, I have been asking myself what does the process look like?  How do
we go from beginner to expert?  What does experience have to do with learning?</p>

<p>As a disclaimer remember I am not a psychologist or a trained professional educator, however I
listened to a Ted talk so clearly I am an expert.  Kidding aside, I have come up with a
phenomenological model for learning.  The crux of the model is that learning occurs in incremental,
logical stages.</p>

<h2>Stage 1 &ndash; You Don&rsquo;t Know Anything</h2>

<p>In the initial stage there is the realization that you do not have knowledge in a particular area
creating the necessity to learn.  This serves as the impetus for what I am calling  mechanical
learning.  You pick up a book to learn a new program language or how to prevent your young child
from having meltdowns.  The latter of course is impossible, but the point of this stage is that
without this realization, you are unable to start the journey.</p>

<h2>Stage 2 &ndash; You Think You Know Everything</h2>

<p>Upon completing the educational work there is a euphoria that comes with the misconception that you
know everything you just studied.  You then set out to immediately apply it. We have all been in
this stage and unfortunately it can lead to disastrous results.  Ever worked for first time manager
who read something out of a book?  Even worse, have you been that manager?  Have you committed to
using the latest and greatest in programming or applications?  How did that work out?</p>

<h2>Stage 3 &ndash; You Don&rsquo;t Know What You Don&rsquo;t Know</h2>

<p>This is where you realize how clueless you are using your newfound knowledge.  The phrase theory
versus practice starts to mean more to you.  You realize it goes deeper and that you might have a
blind spot in your knowledge.  Of all of the levels this is the hardest to achieve because of the
psychological barrier to admitting you don&rsquo;t know everything.</p>

<h2>Stage 4 &ndash; You Know What You Don&rsquo;t Know</h2>

<p>The blind spots have finally been discovered during this stage.  This allows you to now plan for
attaining the full knowledge that is necessary.  Gaining experience is what this stage is really all
about.  It is a great leap and takes the longest to achieve based on the &ldquo;90/10&rdquo; rule:</p>

<blockquote><p>It takes 10% of the time to get to 90% complete, but 90% of the time to get the last 10%.</p></blockquote>

<p>The experience factor reminds me of another quote from that same adviser.  He once helped me solve a
hypergeometric differential equation.  Astounded, I asked him how he knew what to do generating the
following reply:</p>

<blockquote><p>You learn a few tricks when you have been doing this as long as I have.</p><footer><strong>Philip Macklin</strong></footer></blockquote>


<p>There in lies the key to this stage &ndash; gaining experience.</p>

<h2>Stage 5 &ndash; You Now Know It and Can Teach It</h2>

<p>The final test that you really have learned something is can you teach it to someone else?  I don&rsquo;t
mean just telling them about a resource to learn from or assisting in the mechanical aspect.
Rather, can you really understand their problem and answer their questions effectively?  Do you have
the ability to guide them to the solution without just giving away the answer?  Will you be able to
share your insight so that they can go through the same stages you have?</p>

<h2>Wrapping Up</h2>

<p>Like I said this was not meant to be an exhaustive thesis on learning.  Instead it is a model that I
came up with based on my own experience.  In my own life I have had several moments where I get to
the various stages and realize I have more to learn.</p>

<p>Recapping, we have the Five Stages of Learning:</p>

<ol>
<li>You Don&rsquo;t Know Anything</li>
<li>You Think You Know Everything</li>
<li>You Don&rsquo;t Know What You Don&rsquo;t Know</li>
<li>You Now Know What You Don&rsquo;t Know</li>
<li>You Know It and Can Teach it</li>
</ol>

]]></content>
  </entry>
  
</feed>
