<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Becoming Medium]]></title>
  <link href="http://becomingmedium.com/atom.xml" rel="self"/>
  <link href="http://becomingmedium.com/"/>
  <updated>2014-03-13T09:49:36-07:00</updated>
  <id>http://becomingmedium.com/</id>
  <author>
    <name><![CDATA[Wes Bailey]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[My First Hand Experience with Sexism]]></title>
    <link href="http://becomingmedium.com/blog/2014/02/12/my-first-hand-experience-with-sexism/"/>
    <updated>2014-02-12T20:25:00-08:00</updated>
    <id>http://becomingmedium.com/blog/2014/02/12/my-first-hand-experience-with-sexism</id>
    <content type="html"><![CDATA[<p>I recently had a first hand experience with sexism that was so blatant and offensive, I didn&rsquo;t know
what to do in the moment.  I&rsquo;ll give the full details in the core of this post but for now I want
you to ask yourself, what would you do?  Would you stand up and shout?  Would you cower and wither
and just let the situation proceed?  Would you find the courage to speak up?  Would you think of all
the women out there who face this type of experience every day?  Would you want to change the
situation and people&rsquo;s mindset so this never happened to any girl growing up today?</p>

<!--more-->


<h2>The Experience</h2>

<p>I&rsquo;ll get right to it.  I was interviewing with a company recently who reached out to me based on my
experience in the industry.  We weren&rsquo;t really sure what role I would fill, but after a great
conversation with the CTO, I agreed to come in for an in person interview with more members of the
management team.</p>

<p>I had dedicated the day to come into the office and after being met by the CTO, and given a tour of
the office, I sat down with him and the President of the company.  The interview involved questions
about background and general management philosophies.  After about an hour the CTO invited the CEO
to join us.  Usually a good sign at this point that things are moving along well.</p>

<p>The CEO seemed nice enough when we first shook hands.  Pleasantries were exchanged and then right
out of the gate it happened.  His first question to me:</p>

<blockquote><p>&ldquo;Do you wonder why there are no women on the management team at a company who&rsquo;s product is for
women?&rdquo;</p></blockquote>

<p>Wait, what?  Did he really just ask that question?  I started to share it wasn&rsquo;t the first thing on
my mind but he started back up and just kept talking.  I had no time to react or chime in because he
just kept going.  He was almost shouting out me for the next 5-10 minutes as he rambled on and on
stating that women were incapable and defending this ridiculous position.</p>

<blockquote><p>&ldquo;Women are incapable of making the tough decisions necessary to run a profitable company on low
margins.&rdquo; - CEO of a Women&rsquo;s Product Retailer</p></blockquote>

<p>You should know this about me.  I don&rsquo;t do well around <em>alpha males</em>.  I personally think saying
you are this type of person is an inexcusable justification for being an asshole.  I don&rsquo;t have time
for it and don&rsquo;t want to be associated with people like this.  I choose to lead by example and just
quietly walk away and ignore these people rather than argue or fight back.</p>

<p>Now you understand while he was ranting I didn&rsquo;t say anything.  I just sat there, first completely
stunned, then waiting patiently and politely for him to finish.  It was easy to surmise this guy was
a complete jerk and I resolved in my mind the interview was over and I would never work for this
jerk or this company.</p>

<p>The moment finally came where he shut up and he asked me if I had any questions.  Normally I would
go into my list but I just politely said I had no questions but indicated I did need to go to the
bathroom.  He gave me a funny look, and I proceeded to get up and the CTO started giving me
directions to the restroom.</p>

<blockquote><p>&ldquo;What an ass&rdquo; I thought as he held out a hand.</p></blockquote>

<p>He walked around the table and in front of me, put out his hand and shared it was nice to meet me
and thanked me for coming in.  I didn&rsquo;t say anything. I just pursed my lips, shook his hand and
proceeded to walk out of the room.</p>

<h2>What the hell just happened?</h2>

<p>As I walked downstairs to the bathroom all I could think was what the hell just happened?  I debated
what to do next?  Do I just call it quits and head home?  Do I talk to the rest of the team when
there is no point going forward?</p>

<p>I decided to go forward and meet with the VP of Product and the Chief Architect just to connect and
see if they were overtly sexist.  Unlike the CEO they were really nice people and I enjoyed my
conversations with them.  It gave me hope that the CEO didn&rsquo;t share his terrible views with anyone
else on the management team.</p>

<p>I left and immediately I started reflecting on the day.  How could the President and CTO just sit
there, quietly, neither refuting or acknowledging what he said?  Did they believe it as well?  They
seemed like such nice people who were both married and had daughters.  How could allow this to
happen?  Was it the money?  How sad!</p>

<h2>Was it a test?</h2>

<p>I wrote a post on Facebook describing the situation to my friends and asking them what I should do.
I clearly made up my mind I wouldn&rsquo;t be moving forward with the company and had to communicate that.
Surprisingly most of my women friends and my wife advised me to just let it go without bringing it
up when I rejected them.</p>

<p>A couple of people suggested it was a test.  The hypothesis being that the management team wanted to
see how I would react and conduct myself around a controversial or difficult situation.  How could
you possibly use this as some way to test someone&rsquo;s leadership capabilities?  Would they inflict
some test scenario on a female candidate that would make her feel equally uncomfortable?  What did
they hope to accomplish by going down a path that any HR Generalist would tell you to completely
avoid?</p>

<h2>What to do?</h2>

<p>I then turned inward.  I thought of the women in my life, my wife of almost 18yrs and my little 4.5
year old daughters.  What would they think of their father for not saying anything and letting this
jerk spew his sexist beliefs?</p>

<blockquote><p>&ldquo;How could I just sit there and not say anything?&rdquo;</p></blockquote>

<p>I felt small, really small for not confronting him.  That night I couldn&rsquo;t sleep and felt this heavy
burden to do something.  But what?  What should I do?  The moment had passed to confront him
personally.</p>

<p>The next morning I told the recruiter the story and they were horrified.  The recruiter couldn&rsquo;t
believe that he said it and that the people she knew in the room condoned the behavior.  Of course
we agreed I should withdraw from consideration.  What they didn&rsquo;t know how to handle was approaching
the topic of conversation.</p>

<p>Going back to FB post, the overwhelming majority said I should just let it go and not bring it up or
address it any way.  This really surprised me especially considering how many women said I should
just ignore it.  It saddened me to hear that because it just reinforced my fear that women just put
up with this all the time.  I was feeling their frequent experience for the first time and it made
me angry and left me feeling helpless.</p>

<h2>The Lack of Acknowledgement</h2>

<p>I could not just be quiet about it so I decided to address it when I withdrew from consideration.</p>

<blockquote><p>There were also statements made yesterday about contributions and capabilities of women that I
disagree with.  I expected a team and culture that would embrace positive contributions from a
broad base of people and perspectives.</p></blockquote>

<p>I was hoping for a response that would explain the CEO&rsquo;s actions but instead I got an all the best
wish, completely ignoring the sexist statements and their presentation to me.  Later when the
recruiter discussed the situation with them their response was:</p>

<blockquote><p>&ldquo;It was just a misunderstanding&rdquo;, CTO of said company</p></blockquote>

<p>I couldn&rsquo;t believe this!  Implying it was my fault somehow?  Now I really empathized with all the
women who were victims of assault or rape.  To me, this was equivalent to videoing an assault or
rape, doing nothing to stop it and later claiming you didn&rsquo;t have a part in it.  Yes you did.</p>

<h2>Sharing</h2>

<p>I decided to share this story because it is the right thing to do.  I haven&rsquo;t named anyone and I
won&rsquo;t going forward.  Hopefully the people involved will read this post and reconsider their
positions and how they conduct themselves.</p>

<p>Sadly, sexism is alive and well in my industry.  I am sad I had to experience this but in some
respect glad I did.  It gave me a firsthand experience of what it is like to experience sexism.  I
want my fellow male counterparts to stop being complicit when this type of behavior or mentality is
presented.  We have the opportunity to just say no and we should.  I&rsquo;ll never sit quiet again and
you shouldn&rsquo;t either!</p>

<p>What would you do?  What should you do?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Supportive Technical Interview]]></title>
    <link href="http://becomingmedium.com/blog/2014/01/17/the-supportive-interview/"/>
    <updated>2014-01-17T22:02:00-08:00</updated>
    <id>http://becomingmedium.com/blog/2014/01/17/the-supportive-interview</id>
    <content type="html"><![CDATA[<h2>Interviews Gone Wrong</h2>

<p>If you have read my last few posts, you know that I do a LOT of interviewing.  I enjoy it and love
the conversations that transpire.  The problem is that most interviews are a horrible experience for
everyone involved.  As a candidate you have to do the mind numbing walk through of everywhere you
ever worked because no who is interviewing you bothered to read your resume.  As a panel member, you
get candidates who just show up thinking their mere presence grants them a job.  Crazy from both
sides!</p>

<!--more-->


<p>Lately I have had quite a few discussions with folks on what makes a successful interview?  How do
you learn the most about a candidate?  What are we trying to accomplish with the interview?  As a
candidate, how can I show them I am really the right person for the job?  In this post, I am going
to share a few guidelines for hiring managers that I think lead to a great interview.  If you are
the candidate, you can read this and if you find an experience like the one I describe, you can be
better prepared.</p>

<h2>The Sweaty Guy</h2>

<p>Years ago when I was working at <a href="http://www.verticalresponse.com"
target="_blank">VerticalResponse</a>, I was part of an interview panel for a prospective engineer.
There were 6 of us and the candidate crammed into a tiny conference room where we started off with
the proverbial <em>tell us about your background</em> question because not all of us had read his resume or
prepared for the interview.  The candidate started to share his experience and soon enough we were
asking him questions.  Smelling fear, we started to circle around this guy like a pack of blood
thirsty sharks, asking him questions that soon became apparent were above his skill level.  It got
hotter and hotter in the room and then the poor candidate started to sweat profusely from the heat
and the pressure of the situation.</p>

<p>Normal people at this point take note, show some empathy, and ask the person if they need a break or
some water.  Not us!  We kept asking more difficult questions and kept drilling this guy like
nobody&rsquo;s business.  We put him in front of a white board and asked him to design a database for a
library problem that was one of our stock questions. It was customary to then get into details about
standard CRUD operations that would be performed against the design including possible
optimizations.  He was doing poorly but we didn&rsquo;t stop asking him questions.  We just kept asking,
drilling deeper, and further humiliating the guy until it was embarrassing.</p>

<p>Not satisfied with our established pedestal, we jumped right in to our environment and vernacular,
asking him detailed questions about how he would solve a prospective problem.  Then, like Keith
Hernandez in the <a href="http://youtu.be/Lr0ggLKhH1I" target="_blank">kissing scene</a>, we asked
ourselves how could this guy not quickly understand our rpm based deployment system?  What kind of
novice are we interviewing?  Why is he sweating so much?  How smart are we, right?  We are really
smart!  Man, he is really sweating a lot.</p>

<h2>Don&rsquo;t Pat Yourself on the Back</h2>

<p>Have you ever been a part of this type of experience?  For the sake of every candidate out there, I
hope not.  I can remember after we merciless ended the interview and he was walked out and wished
well.  When I got back he was already nicknamed <em>sweaty guy</em>.  To this day looking back, I actually
feel really bad for him.  I wish I remembered his name because I would go back and apologize to him
for being an ass, even after all of these years.</p>

<p>After it was over we all sat in the room talking about how great our process was.  We exposed that
guy didn&rsquo;t we?  We were all thumbs down saying what a loser the guy was.  The reality of the
situation was that we spent most of the time just spending time on ourselves, showing how <em>smart</em>
we were.  We spent so much time patting each other on the back that we never gave the guy any chance
to truly share his experience or learn anything about us.</p>

<h2>Put the Candidate at Ease</h2>

<p>A few years after that experience I became a hiring manager again.  I learned very quickly that one
of the key practices of a good interview was to put the candidate in an environment where they will
be successful and supported.  Let&rsquo;s be honest and understand that interviewing can be a nerve
wracking experience, especially for prospective female engineers.</p>

<p>Candidates want to impress yet they have no idea what you are going to ask them.  The canvas is wide
open.  The following are some tricks I have learned over the years for having a successful technical
interview:</p>

<ul>
<li><p><em>Share the Agenda</em> - One of the first things I do in any interview is to first tell the candidate
what we are going to do.  Just like any meeting go over the agenda so they know what to expect and
reaffirm who they are going to talk to.  It just makes it easier and helps make them comfortable.</p></li>
<li><p><em>Use their Editor</em> - If you are doing a pairing exercise, ask them before they come in what editor
they like to use and make sure it is installed on the machine you are going to use.  This way you
spend time working on code together rather than wasting time having them relearn all the keyboard
shortcuts.</p></li>
<li><p><em>Use Their Preferred Language</em> - Candidates often know several languages so make sure you identify
which is their preferred language and test them in it.</p></li>
<li><p><em>Allow Google</em> - Allow them to use Google during the technical interview and explain to them it is
OK to look things up.  We do it all the time in our job, so why should interviewing be any
different?  This is not about rote memorization and besides, I am old, so the memory registers in
my head are diminishing.  If I can&rsquo;t look up method signatures and documentation, I will surely
fail the test.  Does that mean I can&rsquo;t write good code?  Hardly!</p></li>
</ul>


<h2>Avoid Context</h2>

<p>Conventional wisdom suggests that we want to put people on the job before they start as a good way
to test if their skills and experience will work.  The caveat to this is how far the candidate is
removed from your context.  When I did my pairing exercise at ModCloth, I was given 90 minutes to
build a product shots service.  I knew it was going to be a long exercise when my first question to
<a href="https://twitter.com/richardiux" target="_blank">@richardiux</a> was, &ldquo;What is a product
shot?&rdquo;.</p>

<p>A few things on context to keep in mind:</p>

<ul>
<li><p><em>Provide Background</em> - Understand how far your engineers are from the edge of the product.  If
they are far from the edge, meaning it is not an engineering driven role, then make sure your
candidate gets plenty of background.</p></li>
<li><p><em>Use a Kata</em> - Try using a <a href="http://en.wikipedia.org/wiki/Kata_(programming)"
target="_blank">kata</a> to learn about their skills.  I was so inspired by this idea I developed
a <a href="https://github.com/wbailey/kata" target="_blank">ruby gem</a> that we use for our
pairing test.</p></li>
</ul>


<h2>Choose Your Panel Wisely</h2>

<p>This is an important aspect that many overlook.  You have to pay attention to the type of candidate
you are interviewing and assess who on the team will best be able to judge them?  If you have a very
senior candidate but have all junior engineers interviewing them you will not be successful.  The
candidate will not be impressed by your team and the junior engineers might be put off by the
candidate.</p>

<p>Make sure you have a good mixture of the right people to judge the candidate and to represent your
team fairly.  If you have small teams then make sure the candidate meets everyone.  If you have a
larger team, meaning more than 4 people, try splitting into multiple stages with different panels
for each stage.  This way you don&rsquo;t have the marathon day and you don&rsquo;t waste everyone&rsquo;s time if the
candidate doesn&rsquo;t work out.</p>

<h2>Kickoffs and Debriefs</h2>

<p>I really dislike going into an interview where people are totally unprepared and no one knows what
topics to cover or questions to ask me.  Even worse is when you go back for the next round, meet
different people on the team, but answer the same questions.  Don&rsquo;t be that team!</p>

<h3>Kickoff</h3>

<p>Make sure that you have a kickoff meeting to review the role of each person on the panel.  The
hiring manager should lead the meeting and lead the panel through the following agenda:</p>

<ul>
<li><em>Resume Review</em> - Make sure you have reviewed it and share why this candidate&rsquo;s resume fit the
requirements.</li>
<li><em>Interview Background</em> - Don&rsquo;t sell the candidate but share the information about the interview
process to date and why the candidate made it this far.</li>
<li><em>Topic Matrix</em> - Cover the topics that need to be covered with the candidate and setup a matrix of
which panel members will cover each.</li>
<li><em>Schedule</em> - Define and review the schedule and make sure that everyone understands what
conference room they are going to be in and when with a focus on timeliness.</li>
</ul>


<p>I&rsquo;d like to point out that in addition to the topics in the matrix, everyone on the interview panel
should evaluate that candidate on the following:</p>

<ul>
<li><em>Communication Skills</em> - Does the candidate possess the communication skills necessary to work
with the team?</li>
<li><em>Culture Fit</em> - Do you feel the candidate is a good culture fit and why?</li>
<li><em>Questions Asked</em> - Did the candidate do a good job of asking intelligent and relevant questions?</li>
</ul>


<p>One thing to make sure of when planning the individual interviews is to allow the candidate to have
ample time to ask their questions.  Remember that <a href="http://becomingmedium.com/blog/2014/01/04/two-way-street/">interviewing is a two way
street</a>.</p>

<h3>Debrief</h3>

<p>The debrief is the critical component to all of this.  After you are done interviewing the candidate
you have to meet with the team to determine next steps.  In my experience, the sooner you do this
the better.  You want everything to be fresh in everyone&rsquo;s mind so that their notes/memories still
make sense.</p>

<p>Here is an example agenda for this meeting with the interview panel being the attendees:</p>

<ul>
<li><em>Scoring</em> - Take your matrix and have the team score the candidate on a scale of 1-5 in each
category they covered.  They should also score the candidate on the 3 overall requirements
described above as well.</li>
</ul>


<p>At this point you evaluate the scoring and use the following rules:</p>

<ul>
<li><em>>4</em> - Move to the next round or make offer</li>
<li><em>&lt;3</em> - Rejection and move on</li>
</ul>


<p>If they are between a 3 and a 4 then you do the following:</p>

<ul>
<li><em>Strengths/Weaknesses</em> - List out the strengths and weaknesses from the panel.  This is important
so that focus on a particular negative doesn&rsquo;t become the focus of the conversation leading to
rejection of a perfectly good candidate.</li>
<li><em>Evaluate</em> - During the evaluation you review the voting and continue to list the strengths and
weaknesses of the candidate.</li>
<li><em>Decision</em> - After time boxing the evaluation discussion, arrive at a decision based on the
information retrieved from the team.</li>
</ul>


<p>During the discussion you will see what the team thinks the candidate&rsquo;s strengths are and if it
warrants another round or not.</p>

<h2>Pay it Forward</h2>

<p>Regardless of how you come to the decision be sure to commit to it and communicate it to the
candidate.  It is very important to do this when you are rejecting a candidate.  We all have been
there waiting for an answer and not hearing back.  It is a terrible experience so don&rsquo;t put
candidates through this and just let them know.  They&rsquo;ll thank you for it and most likely they will
share they had a good experience interviewing with you with their friends.  Remember, it is a small
world out there in technology so pay it forward.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Interviewing is a Two Way Street]]></title>
    <link href="http://becomingmedium.com/blog/2014/01/04/two-way-street/"/>
    <updated>2014-01-04T20:03:00-08:00</updated>
    <id>http://becomingmedium.com/blog/2014/01/04/two-way-street</id>
    <content type="html"><![CDATA[<h2>No Questions</h2>

<p>I recently had a discussion with <a href="https://twitter.com/benkruger" target="_blank">@benkruger</a>
about interviewing and we both expressed the same frustration.  Candidates who are being interviewed
will do their best to answer your questions.  It is a rare event when you find a candidate who asks
good questions back.  This led me to share the following with Ben:</p>

<blockquote><p>You learn more about a candidate through the questions they ask, than the answers they give.</p></blockquote>

<p>It is true and something that no matter what you do as a candidate you must remember.  Be prepared
to ask good questions.</p>

<!--more-->


<h2>When to Ask?</h2>

<p>So if the success of your interview is determined by the questions you ask, when should you ask
them?  If you are interviewing with Ben, it will actually be the first thing that you do.  I was
surprised to learn Ben does this but the more I thought about it, I think it is a great approach.
So as a candidate, be prepared from the moment you answer the call or step into the conference room
to ask your questions.</p>

<p>If you are not interviewing with Ben, and most of us are not, then I suggest incorporating your
questions into your answer.  This promotes lively discussion and turns the table on the interview
panel.  As an example, the other day I was actually being interviewed and within 5 minutes I had
them answering my questions which led to more questions from both parties.  It was great!</p>

<h2>What to Ask?</h2>

<p>I can&rsquo;t provide what to ask for every type of interview because that is impossible.  What I can
share is there is nothing worse from a hiring manager&rsquo;s perspective to be all excited about a
candidate and here them say:</p>

<blockquote><p>&ldquo;I don&rsquo;t really have any other questions&rdquo;</p></blockquote>

<p>That sentence just kills it for me (so don&rsquo;t use it).  My view is you should always ask about the
following:</p>

<ul>
<li><p><em>The Company</em> - Make sure you learn everything you need to know about the company, it&rsquo;s vision and
mission and if they are currently successful in fulfilling both.  Understand how you can
contribute to both.</p></li>
<li><p><em>The Culture</em> - This is probably number one.  You can be a great technical fit but if you are not
a culture fit you will not be successful.</p></li>
<li><p><em>The Team</em> - Understand the people and makeup of the team you will be joining.  Try and meet as
many of them as possible to ask them these questions.</p></li>
<li><p><em>The Role</em> - Be sure to confirm your understanding of the role as much as possible.  Don&rsquo;t just
blindly accept the job description thinking it is similar to your current role.</p></li>
<li><p><em>The Successes</em> - Learn from the interview panel what they have done successfully and what the
wins are.  Struggling to share wins is usually not a good sign.</p></li>
<li><p><em>The Failures</em> - Are they going to be transparent enough to let you know where all of the
skeletons are buried?</p></li>
<li><p><em>How they Develop</em> - Try and get a good picture of how the company and team operates.  Are they
agile? Do they pair?  Are engineers involved in discover?  Tons to be asked here!</p></li>
<li><p><em>How they Operate</em> - Understand what operations look like.  How do they handle production support?
What involvement in sales will you have?</p></li>
<li><p><em>How they Communicate</em> - Sounds like a throw away question but it is really important.
Understanding how people in the company communicate will help you determine if this position is
for you.</p></li>
</ul>


<p>Of course there are more you can ask but for my money these are the core required questions.  If you
only get through these you will have learned a lot.  I still say try and take it further and get as
detailed as possible.</p>

<h2>How to Ask?</h2>

<p>A difficulty most technical people have is how to ask the questions in the first place?  You
probably have a hard enough time talking about yourself let alone turning the interview around and
asking questions.  One technique I use that has worked well is to provide your answer and tack on a
question on the end to turn it back on the interviewer.  Here is an example from an interview I had
where I was the candidate last week:</p>

<p><em>Question</em>: How many teams do you manage?</p>

<p><em>Answer</em>: I currently manage X cross functional teams that are made up of Product Managers,
Technical Leads, Designers, Engineers and QA.  Maybe you can tell me how that compares to how many
teams there are here and how they are organized? Who are the members of the team?</p>

<h2>Take the Wheel</h2>

<p>Remember to always take an interview by the wheel and drive it both ways down the road.  Be sure to
answer the interview panel&rsquo;s questions thoroughly and thoughtfully.  Concurrently, make sure that
you never end up in that dead position of having no good and thoughtful questions to ask.  You kill
your chances of landing the job if you do!</p>

<blockquote><p>Kill it by asking great questions!</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Avoiding Paper Tigers, Leeches and Space Cadets]]></title>
    <link href="http://becomingmedium.com/blog/2013/10/28/avoiding-paper-tigers-and-leaches/"/>
    <updated>2013-10-28T10:53:00-07:00</updated>
    <id>http://becomingmedium.com/blog/2013/10/28/avoiding-paper-tigers-and-leaches</id>
    <content type="html"><![CDATA[<h3>Recruiting</h3>

<p>One of my favorite aspects about my job is recruiting.  I absolutely love it!  It&rsquo;s true.
Recruiting allows me to meet a lot of engineers and talk shop.  You  get to learn all about their
backgrounds, interests, companies they have worked for and amazing projects they have worked on.  If
you are lucky you also have an amazing technical conversation at some point that leaves everyone
impressed.  What is not to love?</p>

<!-- more -->


<p>Well, I don&rsquo;t love disappointing my team with a candidate.  We have all been there either as a
hiring manager or a member of the team.  The team is totally pumped and excited to meet whiz bang
candidate and interview them.  However, after the candidate gets past the introductory phase
everyone on the interview panel realizes they have been duped.  The candidate turns out to be a
complete dud.  We are left to wonder how they made it through the screening process and got this
far?  It sucks and neither the team or the candidate is happy about it.</p>

<p>In this post I am going to introduce you to candidates that I have dubbed <em>paper tigers</em>, <em>leeches</em>
and <em>space cadets</em>.  These are the candidate types who in my experience you want to avoid like the
plague.  The problem is how do we identify them and discover them early on in the process?  What
characteristics do they have in common with great candidates that make them hard to distinguish?
What questions can we ask them during a phone screen to ferret them out?</p>

<p>I don&rsquo;t have prescriptive answers for all of these questions to be honest.  I think by sharing my
experience and raising some valid points, you might be able to avoid candidates like this in the
future providing a better search experience for your team and the prospective candidates.</p>

<h3>Screening 101</h3>

<p>How many times have you read a candidate&rsquo;s resume and thought to yourself how amazing this person is
and what a great candidate they would make for your open position?  Reviewing resumes and screening
prospective candidates is not an easy thing to do.  Resumes come in all forms and flavors making it
difficult sometimes to read whether a candidate has the relevant experience necessary for the job.
A few things that I have noticed that help in the process include the following:</p>

<ul>
<li><em>Reject any candidate that doesn&rsquo;t write a personalized cover letter</em> - It doesn&rsquo;t take that much
effort to explain why you are interested and why your experience is right for the job then don&rsquo;t
bother.</li>
<li><em>Favor resumes that tell a story and really emphasize what the candidate is interested in and
passionate about</em> - If people are doing it just for the money they won&rsquo;t make great members of
your team.</li>
<li><em>Resumes that illustrate how they used their skills are better than ones that just list everything
they have ever used</em> - I dislike people who just mind numblingly list programming languages they
have used.  You can&rsquo;t tell if they have only played with the language or whether they used it
professionally</li>
<li><em>Forget resumes that have more than one grammatical error or spelling mistakes right away</em> - I
know this is tough for folks where English isn&rsquo;t their first language.  There are so many tools
now that to me it reflects effort more than language difficulty.</li>
<li><em>Weed out resumes that don&rsquo;t contain the relevant experience or work history in them because
stretch candidates rarely work in practice</em> - This is just a no brainer to me.</li>
<li><em>A pet peeve of mine is resumes that are sent as Word docs instead of PDFs especially for
technology positions</em> - Send a PDF so I don&rsquo;t have to worry about which version of Word I have
installed or how crappy the doc gets displayed when converted in Google Docs.</li>
</ul>


<p>Of course there are more tips for screening but this isn&rsquo;t meant to be a comprehensive breakdown of
how to filter through resumes.  Years ago, Joel Spolsky wrote a nice
<a href="http://www.joelonsoftware.com/articles/SortingResumes.html">piece</a> on the subject so you can read
that for reference.</p>

<h3>Paper Tigers</h3>

<p>Like the name I have given them implies, the best way to describe people who fall into this
category is that they look fantastic on paper but completely underwhelm when interviewed in person.
They either totally lack on the technical side or something else comes up where they don&rsquo;t impress.
Not being to totally put my finger on this person here are a few characteristics that I have noticed
about them.  Here are what you will immediately see when you read their resume:</p>

<ul>
<li>Their resume is easy to read and really well organized making it clear who they worked for and
what they worked on.</li>
<li>The companies they have worked for are well known for their products or development teams and it
seems they made great contributions to either or both.</li>
<li>The person has a solid educational background with degrees from well known schools and programs.</li>
<li>The projects they list are relevant and have a high correlation to the position they are applying
for.</li>
<li>They perfectly meet all of the requirements for the level of experience for the position.</li>
</ul>


<p>This all sounds great so where does it go awry?  Well this is what I have found to be true from
<em>paper tigers</em> when I phone screen or interview them in person:</p>

<ul>
<li>They tailored their resume to perfectly fit the job description however they neither have the
skills or the experience required.</li>
<li>If they are from an agency you find the recruiter just &ldquo;<em>resume stuffed</em>&rdquo; and the person who you
are speaking with isn&rsquo;t really the person they presented on paper.</li>
<li>They listed they are qualified in too many technologies, languages and frameworks when you drill
you confirm your notion that no one person can be an expert in everything they listed.</li>
<li>When you dig into their experience, you find they are part of a larger team and didn&rsquo;t have the
hands on experience and had actual little involvement in the project or technology</li>
<li>Another quality is listing items they haven&rsquo;t worked with in production but it shows up on their
resume as if they have.</li>
<li>They lie about the amount of experience and later it comes out that they have much less than they
claimed because they claim the length of the entire project as their own vs their actual
involvement in it.</li>
<li>They did the project on their own time and have never done it professionally but count it as real
experience on their resume.</li>
</ul>


<h3>Leeches</h3>

<p>The next category I have dubbed <em>Leeches</em> because like a leach, they survive off of the work of
others.  In their resumes they take credit for others but instead of being caught in the phone
screen, they pull it off and might not be exposed until you hire them.  When they join your team
they drain it just like a parasite which is bad for the team&rsquo;s productivity, chemistry and moral.
Some of the characteristics of this type of candidate include most everything from the <em>paper tiger</em>
and additionally:</p>

<ul>
<li>They led or worked with an offshore team or remote team in another location.</li>
<li>They will claim to have setup or built a team but in reality they had no part in the growth at
all.</li>
<li>They indicate they selected a technology or vendor but then never worked with them or were part of
the implementation.</li>
<li>There was strong technical leadership on the team that they are trying to take credit for as their
work and actions and involvement.</li>
<li>You find out through references that this person isn&rsquo;t in the top half of people that person has
worked with.</li>
<li>They know just enough to be dangerous but don&rsquo;t have the full experience and rely on their
teammates to actually do the work.</li>
<li>Beware the phantom and exaggerated titles from smaller companies that imply leadership and
experience but when you drill in they don&rsquo;t have it.</li>
</ul>


<h3>Space Cadet</h3>

<p>This is a more recent category of candidate for me.  Several times in my career I have come across a
bright individual and think the person could fill in more than one role on the team.  The problem
with this person is they really don&rsquo;t know what they want to do with their careers.  Sometimes some
simple coaching can really benefit this type of candidate, but other times you are just dealing with
a person who really doesn&rsquo;t know what they want to do.  This person I call a <em>space cadet</em> because
they have no clue and if you bring them on to your team, they will ultimately blow it up like a
failed rocket launch through their ambivalent actions.</p>

<p>How do you tell if you are talking to a <em>space cadet</em>?  Here are a few things that might help you
discern them from good candidates:</p>

<ul>
<li>They work at a very large company where they can kind of drift and hide from real responsibility
or success.</li>
<li>The person has worked at their present company for a rather long time.</li>
<li>They have found a unique position at their current company that doesn&rsquo;t really apply to your
company.</li>
<li>The person is unsure whether they want to be a manager or a technical lead.  The main reason they
are unsure is because they don&rsquo;t really understand the difference between the roles.</li>
<li>The candidate is usually a really smart and well educated person but you just have a hunch they
haven&rsquo;t fully applied themselves like other candidates with similar backgrounds have.</li>
<li>They just totally have no freaking idea what they really want to do or how to effectively use
their talents.</li>
</ul>


<h3>Discovery Techniques</h3>

<p>I don&rsquo;t have any powerful insights here except to take the time to really get to know the candidate.
One technique I use is to ask open ended questions and see where the candidate goes with their
response.  You&rsquo;ll know if they are bluffing or really qualified as you ask more questions that
involve them sharing the depth of their knowledge.</p>

<p>One example when it comes to roles is:</p>

<blockquote><p>How do you define good software architecture?</p></blockquote>

<p>Totally open ended and doesn&rsquo;t give anything away.  The answer can go anywhere from discussing
<em>Design Patterns</em> to <a href="http://www.sandimetz.com">Sandi Metz Rules</a></p>

<p>As an example one of my favorite ruby questions was simply:</p>

<blockquote><p>What is the difference between an array and a hash in ruby?</p></blockquote>

<p>If you wind up talking about indexes and the conversation stops there the candidate is pretty
junior.  If they take it all the way to the C code in the MRI discussing the b-tree search for the
hash then you know they&rsquo;ve been there and done that!</p>

<p>Another trick I have used to suss people like this out is to ask the same or a related question
again either during the interview, or for the next round of the interview process.  If candidates
can&rsquo;t keep their stories and answers straight there is pretty high likelihood of them being a <em>paper
tiger</em> or a <em>leach</em>.</p>

<p>Let me know what your experience has been!  Have you interviewed these types of candidates and what
techniques did you use to separate them out from the good candidates you wanted to move ahead with?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Flexible Framework for Leveling Software Engineers]]></title>
    <link href="http://becomingmedium.com/blog/2013/09/24/career-levels/"/>
    <updated>2013-09-24T11:43:00-07:00</updated>
    <id>http://becomingmedium.com/blog/2013/09/24/career-levels</id>
    <content type="html"><![CDATA[<h3>The Problem</h3>

<p>Defining a Senior Software Engineer seems to be a pretty difficult task for our industry.  Managing
expectations around this definition is also really difficult and causes strife in organizations that
are trying to grow and retain talent.  The current methodology is to create a &ldquo;<em>Job Description</em>&rdquo;
which focuses on &ldquo;<em>responsibilities</em>&rdquo; and &ldquo;<em>requirements</em>&rdquo; by listing the work skills, technical
requirements and years of experience required for the position.</p>

<!-- more -->


<p>Like everyone else, I used this approach for a while until I ran into problems.  I started looking
for a framework that I could use to scale an organization in both talent evaluation and career
development.  I wanted answers to questions like:</p>

<ul>
<li>How do you differentiate between a Software Engineer and a Senior Software Engineer?</li>
<li>Is seniority based on years of experience or based on technical capability?</li>
<li>How do you promote and fairly compensate engineers who use different languages and tools?</li>
<li>How can you evaluate new talent consistently and compare them with the current members on your
team?</li>
<li>Where do the required years of experience come from and are they just an artificial crutch
justification?</li>
<li>How do you mentor engineers in their career so that they can grow and learn?</li>
</ul>


<p>There are more questions to be answered but this is a good starter set.  Naturally, I searched the web for
answers.  It turned up a couple of somewhat useful threads on
<a href="http://programmers.stackexchange.com/questions/14914/whats-the-difference-between-entry-level-jr-sr-developers">programmers.stackexchange</a>
and on
<a href="http://www.quora.com/When-does-a-software-developer-become-a-senior-software-developer">Quora</a> and
while they left me admiring the technical complexity of some of the answers, there was still
something missing.</p>

<p>Not finding what I wanted online, I talked with a few peers in my network. Turns out they use the
&ldquo;<em>Job Description</em>&rdquo; method and they agree it is a failed approach.  Since my search turned empty I
instead spent a lot of time thinking on the topic and came up with a framework that provides
guidelines for making the decisions around the questions above.</p>

<h3>A New Approach</h3>

<p>It is important to understand that the definition is actually for many levels than just the Senior
Software Engineer.  There are some who argue for a <a href="http://http://www.slideshare.net/bcantrill/surge2013">flat organization</a>,
but I&rsquo;ll address that myth in another blog post.  We should ensure that our level definitions make
it easy to answer the questions we posited previously.  They should also help us lay the foundation
for a career progression that is possible within the company helping us retain talented people.</p>

<p>The challenge I set for myself which really helped provide a different frame of reference was to
answer the following question:</p>

<blockquote><p>If you could describe what an engineer at this level will do using only word, what would it be?</p></blockquote>

<p>A single word is succinct, descriptive and most importantly memorable.  It will be easy for your
teams to digest and in discussions leverage the simplicity.  A single word is only useful if we can
provide context so the next step in the framework is to provide a single sentence description of the
level.</p>

<blockquote><p>Summarize what the person at this level will be doing in a single sentence incorporating the
single word definition from the previous step</p></blockquote>

<p>Building upon context we can switch to defining the major areas of focus the role should have at
this level:</p>

<blockquote><p>Define 3 to 4 technically agnostic areas of focus that provide guidance for a person performing at
this level.</p></blockquote>

<p>It is important with the last step of the approach to not get caught up in the details of the
technical requirements.  Doing so prevents you from having an overall framework and leads to the
dreaded <em>Job Description</em> model that we previously stated doesn&rsquo;t help solve any problems.</p>

<h3>An Example</h3>

<p>Let&rsquo;s walk through how I applied the model to engineering at <a href="http://www.modcloth.com">ModCloth</a>
where we have 3 levels in the software development position:</p>

<ul>
<li>Associate Software Engineer</li>
<li>Software Engineer</li>
<li>Senior Software Engineer</li>
</ul>


<p>Of course we have other roles on the team as well such as test and platform engineers and I am sure
you do on your team&rsquo;s as well, but I&rsquo;ll leave them out for brevity.</p>

<h3>Associate Software Engineer</h3>

<p>This level is reserved for beginners, someone who is fresh out of school or making a career change.
We don&rsquo;t expect them to have a lot of experience and it is easy to envision them spending their
first year <em>learning</em> about the languages used and best practices of their team.  Applying the model
we have the following:</p>

<h4>Description</h4>

<p><em>Learning</em></p>

<h4>Context</h4>

<p><em>At the Associate level you are learning skills and developing competence.</em></p>

<h4>Areas of Focus</h4>

<ul>
<li><em>Develop a basic understanding of the languages and tools used by the team.</em></li>
<li><em>Gain exposure to software development best practices such as TDD, debugging, documentation, etc.</em></li>
<li><em>Learn good communication skills to be used with your teammates.</em></li>
</ul>


<h3>Software Engineer</h3>

<p>At this level the engineer understands the basics of the areas of focus from the previous level.
The distinction is they are now <em>applying</em> their basic skills instead of learning what they are and
requiring supervision.  Of course we are always learning but the difference is the person can now be
trusted to apply their newly acquired skills independently.</p>

<h4>Description</h4>

<p><em>Practicing</em></p>

<h4>Context</h4>

<p><em>At the Software level you are applying your skills and developing expertise</em></p>

<h4>Areas of Focus</h4>

<ul>
<li><em>Leverage best practices to write and continually improve the code base.</em></li>
<li><em>Develop mastery in the tools, languages and frameworks used by the team.</em></li>
<li><em>Begin practicing and learning how to teach/mentor less experienced teammates.</em></li>
</ul>


<h3>Senior Software Engineer</h3>

<p>This level of engineer is the crux of any successful engineering team.  They are able to go beyond
just using tools and techniques and now recommend what the team should do and how to go about it.
They have accomplished a technical maturity that allows them to solve complex problems and begin to
take an ownership position on the code and systems they haven&rsquo;t developed.</p>

<h4>Description</h4>

<p><em>Mentoring</em></p>

<h4>Context</h4>

<p><em>At the Senior level you are mentoring your teammates and sharing expertise</em></p>

<h4>Level Areas of Focus</h4>

<ul>
<li><em>Develop the necessary best practices to work with and write a great code base.</em></li>
<li><em>Help evaluate and select the tools, languages and frameworks used by the team.</em></li>
<li><em>On board and mentor new members of the team ensuring their success.</em></li>
<li><em>Begin to take an ownership position on code and systems developed by others</em></li>
</ul>


<h3>Summary</h3>

<p>We have covered a model framework for defining the different levels of any role within an
organization.  The benefits of the model are that it can be applied to any role in the organization
and is scalable.   A simple moniker for remembering the model follows below:</p>

<blockquote><p>Description -> Context -> Areas of Focus</p></blockquote>

<p>Let&rsquo;s revisit how the example application of the model answers the questions posed at the beginning
of this blog.  By providing simple and flexible areas of focus it helps evaluate and contrast the
different levels in the defined role easily.  It is technology and years of experience agnostic
instead judging engineers on their ability to go from individual to more team focused contributors.
It also makes learning and mentoring a key component of how the team will judge it&rsquo;s success.</p>

<p>The one question it doesn&rsquo;t answer is where the years of experience numbers come from?  Honestly, I
have no idea and nor do I need to care anymore when writing a new job description!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Five Stages of Learning]]></title>
    <link href="http://becomingmedium.com/blog/2013/09/06/the-five-stages-of-learning/"/>
    <updated>2013-09-06T16:38:00-07:00</updated>
    <id>http://becomingmedium.com/blog/2013/09/06/the-five-stages-of-learning</id>
    <content type="html"><![CDATA[<p>We just completed our semi-annual performance review cycle at ModCloth.  In many of my discussions
delivering the reviews we discussed learning.  In each case I shared a pearl of wisdom taught to me
by an adviser in college while I was studying physics:</p>

<blockquote><p>You don&#8217;t really learn physics until you teach it.</p><footer><strong>Philip Macklin</strong> <cite>Miami University</cite></footer></blockquote>


<p>After sharing this I encouraged my team members to be more proactive about mentoring.  The
hypothesis being they would become better engineers through teaching and truly learning their craft.</p>

<!--more-->


<p>This got me thinking about how we really learn.  Not the actual mechanics of basic learning mind
you.  Those are done by reading books, taking classes or whatever serves as the tool for delivering
the necessary content.  Rather, I have been asking myself what does the process look like?  How do
we go from beginner to expert?  What does experience have to do with learning?</p>

<p>As a disclaimer remember I am not a psychologist or a trained professional educator, however I
listened to a Ted talk so clearly I am an expert.  Kidding aside, I have come up with a
phenomenological model for learning.  The crux of the model is that learning occurs in incremental,
logical stages.</p>

<h2>Stage 1 - You Don&rsquo;t Know Anything</h2>

<p>In the initial stage there is the realization that you do not have knowledge in a particular area
creating the necessity to learn.  This serves as the impetus for what I am calling  mechanical
learning.  You pick up a book to learn a new program language or how to prevent your young child
from having meltdowns.  The latter of course is impossible, but the point of this stage is that
without this realization, you are unable to start the journey.</p>

<h2>Stage 2 - You Think You Know Everything</h2>

<p>Upon completing the educational work there is a euphoria that comes with the misconception that you
know everything you just studied.  You then set out to immediately apply it. We have all been in
this stage and unfortunately it can lead to disastrous results.  Ever worked for first time manager
who read something out of a book?  Even worse, have you been that manager?  Have you committed to
using the latest and greatest in programming or applications?  How did that work out?</p>

<h2>Stage 3 - You Don&rsquo;t Know What You Don&rsquo;t Know</h2>

<p>This is where you realize how clueless you are using your newfound knowledge.  The phrase theory
versus practice starts to mean more to you.  You realize it goes deeper and that you might have a
blind spot in your knowledge.  Of all of the levels this is the hardest to achieve because of the
psychological barrier to admitting you don&rsquo;t know everything.</p>

<h2>Stage 4 - You Know What You Don&rsquo;t Know</h2>

<p>The blind spots have finally been discovered during this stage.  This allows you to now plan for
attaining the full knowledge that is necessary.  Gaining experience is what this stage is really all
about.  It is a great leap and takes the longest to achieve based on the &ldquo;90/10&rdquo; rule:</p>

<blockquote><p>It takes 10% of the time to get to 90% complete, but 90% of the time to get the last 10%.</p></blockquote>

<p>The experience factor reminds me of another quote from that same adviser.  He once helped me solve a
hypergeometric differential equation.  Astounded, I asked him how he knew what to do generating the
following reply:</p>

<blockquote><p>You learn a few tricks when you have been doing this as long as I have.</p><footer><strong>Philip Macklin</strong></footer></blockquote>


<p>There in lies the key to this stage - gaining experience.</p>

<h2>Stage 5 - You Now Know It and Can Teach It</h2>

<p>The final test that you really have learned something is can you teach it to someone else?  I don&rsquo;t
mean just telling them about a resource to learn from or assisting in the mechanical aspect.
Rather, can you really understand their problem and answer their questions effectively?  Do you have
the ability to guide them to the solution without just giving away the answer?  Will you be able to
share your insight so that they can go through the same stages you have?</p>

<h2>Wrapping Up</h2>

<p>Like I said this was not meant to be an exhaustive thesis on learning.  Instead it is a model that I
came up with based on my own experience.  In my own life I have had several moments where I get to
the various stages and realize I have more to learn.</p>

<p>Recapping, we have the Five Stages of Learning:</p>

<ol>
<li>You Don&rsquo;t Know Anything</li>
<li>You Think You Know Everything</li>
<li>You Don&rsquo;t Know What You Don&rsquo;t Know</li>
<li>You Now Know What You Don&rsquo;t Know</li>
<li>You Know It and Can Teach it</li>
</ol>

]]></content>
  </entry>
  
</feed>
